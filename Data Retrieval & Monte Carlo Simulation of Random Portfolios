# Define the list of stock symbols (NSE)
assets = ['SBIN', 'TCS', 'INFY', 'HDFCBANK', 'RELIANCE']

# Download data using jugaad_data
hist_data = {}
for asset in assets:
    df = stock_df(symbol=asset,
                  from_date=date(2024, 1, 1),
                  to_date=date(2024, 7, 10),
                  series="EQ")
    df.set_index("DATE", inplace=True)
    hist_data[asset] = df["CLOSE"]

# Combine into single DataFrame
hist_data = pd.concat(hist_data, axis=1)

# Calculate historical log returns
hist_return = np.log(hist_data / hist_data.shift(1))
hist_return = hist_return.dropna()

# Calculate mean, covariance, correlation
hist_mean = hist_return.mean(axis=0).to_frame()
hist_mean.columns = ['mu']
hist_cov = hist_return.cov()
hist_corr = hist_return.corr()

# Display the results
print("\nðŸ“ˆ Mean Log Returns:")
print(hist_mean.transpose())

print("\nðŸ“Š Covariance Matrix:")
print(hist_cov)

print("\nðŸ”— Correlation Matrix:")
print(hist_corr)

# Assuming hist_mean and hist_cov are already calculated from the previous block

n_portfolios = 5000
port_returns = np.zeros(n_portfolios)
port_stdevs = np.zeros(n_portfolios)

for i in range(n_portfolios):
    w = np.random.rand(len(assets))       # Random weights
    w = w / np.sum(w)                     # Normalize to sum to 1

    # Annualized portfolio return and volatility
    port_return = np.dot(w.T, hist_mean.values.flatten()) * 250
    port_stdev = np.sqrt(np.dot(w.T, np.dot(hist_cov.values, w))) * np.sqrt(250)

    port_returns[i] = port_return
    port_stdevs[i] = port_stdev

# Plot the results
plt.figure(figsize=(10, 6))
plt.scatter(port_stdevs, port_returns, c=port_returns / port_stdevs, cmap='viridis', marker='o', s=10, alpha=0.7)
plt.colorbar(label='Sharpe Ratio')
plt.xlabel('Expected Volatility')
plt.ylabel('Expected Return')
plt.title('Efficient Frontier: Random Portfolios (Indian Stocks)')
plt.grid(True)
plt.show()
